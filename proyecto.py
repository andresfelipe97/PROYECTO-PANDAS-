# -*- coding: utf-8 -*-
"""PROYECTO

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bpILA2n9C-FBBv5l_IUDO7hMN4eZsFlG
"""

import pandas as pd

# cargar el dataset

file_path ='/content/Online_Retail.csv'
data= pd.read_csv(file_path, encoding='ISO-8859-1')

print(data.info())

print(data.head(5))

print(data.describe())

data.isnull().sum()

data.duplicated().sum()

unique_values= {col:data[col].unique() for col in data.columns}

for col, values in unique_values.items():
  print(f'columna: {col}')
  print(f'numero de valores unicos: {len(values)}')
  print(f'vlores unicos:{values[:10]}')
  print('-'* 50)

#3 LIMPIEZA DE DATOS
data_cleaned = data.drop_duplicates()
data_cleaned = data_cleaned.dropna(subset=['CustomerID'])

data_cleaned.isnull().sum()

data_cleaned.duplicated().sum()

data_cleaned.head()

data_cleaned['TotalAmount'] = data_cleaned['Quantity'] * data_cleaned['UnitPrice']

data_cleaned.head()

data_cleaned['InvoiceDate']= pd.to_datetime(data_cleaned['InvoiceDate'])
data_cleaned.head()

print(data_cleaned.info())

data_cleaned['Year'] = data_cleaned['InvoiceDate'].dt.year
data_cleaned['Month'] = data_cleaned['InvoiceDate'].dt.year
print(data_cleaned.head())

sales_by_year = data_cleaned.groupby('Year')['TotalAmount'].sum()
sales_by_year

data_cleaned['Semester'] = data_cleaned['Month'].apply(lambda x:1 if x<=6 else 2)

sales_by_semester = data_cleaned.groupby(['Year', 'Semester'])['TotalAmount'].sum()
sales_by_semester

data_cleaned['Quarter'] = data_cleaned['Month'].apply(lambda x:
                                                   1 if x <= 3 else
                                                   2 if x <= 6 else
                                                   3 if x <= 9 else 4)

sales_by_quarter = data_cleaned.groupby(['Year', 'Quarter'])['TotalAmount'].sum()
print(sales_by_quarter)

total_returns = data_cleaned[data_cleaned['Quantity'] < 0].shape[0]
total_returns

total_non_returns = data_cleaned[data_cleaned['Quantity'] >= 0].shape[0]
total_non_returns

import matplotlib.pyplot as plt

labels = ['Returns', 'Non-Returns']
sizes = [total_returns, total_non_returns]
colors = ['pink', 'lightgreen']
plt.figure (figsize=(8,8))
plt.pie(sizes, labels=labels,colors=colors, autopct='%1.1f%%', startangle=140)
plt.axis('equal')
plt.title('Distribution of Devoluciones and Non-Devoluciones')

# Crear una columna categórica basada en el monto total de la transacción (ejemplo: 'Low', 'Medium', 'High')
def categorize_total_amount(amount):
    if amount < 20:
        return 'Low'
    elif 20 <= amount < 100:
        return 'Medium'
    else:
        return 'High'

data_cleaned['AmountCategory'] = data_cleaned['TotalAmount'].apply(categorize_total_amount)

# Mostrar las primeras filas con las nuevas columnas
print(data_cleaned.head())

plt.figure(figsize=(12,6))
data_cleaned.groupby(['Year', 'Month'])['TotalAmount'].sum().plot(kind='bar')
plt.title('Distribución de ventas por mes y año')
plt.xlabel('Año, Mes')
plt.ylabel('Ventas totales')
plt.show()

top_products = data_cleaned.groupby('StockCode')['Quantity'].sum().sort_values(ascending=False).head(10)
top_products = top_products.reset_index()
top_products = pd.merge(top_products,data_cleaned[['StockCode','Description']].drop_duplicates(), on='StockCode',how='left')

plt.figure(figsize=(12,8))
plt.barh(top_products['Description'],top_products['Quantity'])
plt.title('Productos Más Vendidos')
plt.xlabel('Cantidad Vendida')
plt.ylabel('Producto')
plt.gca().invert_yaxis()
plt.show()